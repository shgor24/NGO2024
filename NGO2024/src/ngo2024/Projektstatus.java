/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ngo2024; 

import java.util.ArrayList;
import javax.swing.DefaultListModel;
import oru.inf.InfDB;
import oru.inf.InfException;

/**pack
 *
 * @author fatimatouray
 */
public class Projektstatus extends javax.swing.JFrame {
    
    private InfDB idb;
    private String aid;
    
    private javax.swing.JList<String> projekt;
    private String selectedStatus;
    
    

    /**
     * Creates new form Projektstatus
     */
    public Projektstatus(InfDB idb, String aid) {
        
        this.idb = idb;
        this.aid = "1";
        
        initComponents();
        
        
   

        
        
 
        cbstatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Alla", "Pågående", "Avslutad", "Planerat"}));
        cbstatus.addActionListener(new java.awt.event.ActionListener(){
        
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbstatusActionPerformed(evt);
                

      
        }
    });
        cbstatus.setSelectedItem("Alla");
        btnVisastatus = new javax.swing.JButton();
        btnVisastatus.setText("Visa projekt");
        btnVisastatus.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnVisastatusActionPerformed(evt);
            
        }
      
    });
     

    }
    
    public void hamtaAllaProjekt() {
       
        try {
            String selectedStatus = (String) cbstatus.getSelectedItem();
            String sqlFraga;
            if (selectedStatus.equals("Alla")){

             sqlFraga = " select projektnamn from projekt where pid in (select pid from ans_proj where aid in (select aid from anstalld where avdelning in (select avdelning from anstalld where aid = " + aid +")))";
        } else {
                sqlFraga = "select projektnamn from projekt where status = '" + selectedStatus + "' AND pid IN (select pid from ans_proj where aid IN (select aid from anstalld where avdelning IN (select avdelning from anstalld where aid = "+aid +"))";
}
       ArrayList < String> projektnamn = idb.fetchColumn(sqlFraga);  
       DefaultListModel <String> lista = new DefaultListModel <> ();
        
        for (String namn :projektnamn){
        
            lista.addElement(namn);
        
        }
        
        ltprojekt.setModel (lista);

        
        }
        
        catch (InfException ex){
            
            System.out.println (ex.getMessage());
        
        }
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbstatus = new javax.swing.JComboBox<>();
        btnVisastatus = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ltprojekt = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cbstatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Alla", "Pågående", "Avslutad", "Planerat", " " }));
        cbstatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbstatusActionPerformed(evt);
            }
        });

        btnVisastatus.setText("Visa projekt");
        btnVisastatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVisastatusActionPerformed(evt);
            }
        });

        ltprojekt.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(ltprojekt);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbstatus, 0, 103, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 93, Short.MAX_VALUE)
                .addComponent(btnVisastatus)
                .addGap(47, 47, 47))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(cbstatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnVisastatus)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(63, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    private void cbstatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbstatusActionPerformed
  
// Hämta den valda statusen från ComboBoxen
    selectedStatus = getSelectedStatus();
       System.out.println("Selected status: " + selectedStatus);
    
     if (selectedStatus.equals("Alla")) {
        hamtaAllaProjekt();
    
        // Kolla vilken status som är vald och uppdatera listan över projekt
       
    } else if(selectedStatus.equals("Pagaende")){
                hamtaPagaendeProjekt();
                
    } else if(selectedStatus.equals("Avslutad")){
                hamtaAvslutadeProjekt();
                
    } else if(selectedStatus.equals("Planerat")){
                hamtaPlaneratProjekt();
                
              
    }
}
    
    private String getSelectedStatus() {
        return (String) cbstatus.getSelectedItem();
    }

public void hamtaPagaendeProjekt() {
    try { String selectedStatus = (String) cbstatus.getSelectedItem();
        // SQL-fråga för att hämta pågående projekt
        String sqlFraga = "SELECT projektnamn FROM projekt WHERE status = 'Pågående' AND pid IN (SELECT pid FROM ans_proj WHERE aid IN (SELECT aid FROM anstalld WHERE avdelning IN (SELECT avdelning FROM anstalld WHERE aid = " + aid + ")))";
        ArrayList<String> projektnamn = idb.fetchColumn(sqlFraga);

        DefaultListModel<String> lista = new DefaultListModel<>();

        for (String namn : projektnamn) {
            lista.addElement(namn);
        }

        ltprojekt.setModel(lista);

    } catch (InfException ex) {
        System.out.println(ex.getMessage());
    }
}

public void hamtaAvslutadeProjekt() {
    try {String selectedStatus = (String) cbstatus.getSelectedItem();
        // SQL-fråga för att hämta avslutade projekt
        String sqlFraga = "SELECT projektnamn FROM projekt WHERE status = 'Avslutad' AND pid IN (SELECT pid FROM ans_proj WHERE aid IN (SELECT aid FROM anstalld WHERE avdelning IN (SELECT avdelning FROM anstalld WHERE aid = " + aid + ")))";;
        ArrayList<String> projektnamn = idb.fetchColumn(sqlFraga);

        DefaultListModel<String> lista = new DefaultListModel<>();

        for (String namn : projektnamn) {
            lista.addElement(namn);
        }

        ltprojekt.setModel(lista);

    } catch (InfException ex) {
        System.out.println(ex.getMessage());
    }

}
 
public void hamtaPlaneratProjekt() {
    try {String selectedStatus = (String) cbstatus.getSelectedItem();
        // SQL-fråga för att hämta pågående projekt
        String sqlFraga = "SELECT projektnamn FROM projekt WHERE status = 'Planerat' AND pid IN (SELECT pid FROM ans_proj WHERE aid IN (SELECT aid FROM anstalld WHERE avdelning IN (SELECT avdelning FROM anstalld WHERE aid = " + aid + ")))";;
        ArrayList<String> projektnamn = idb.fetchColumn(sqlFraga);

        DefaultListModel<String> lista = new DefaultListModel<>();

        for (String namn : projektnamn) {
            lista.addElement(namn);
        }

        ltprojekt.setModel(lista);

    } catch (InfException ex) {
        System.out.println(ex.getMessage());
    }
    
    }//GEN-LAST:event_cbstatusActionPerformed

    private void btnVisastatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVisastatusActionPerformed
      
        String selectedStatus = (String) cbstatus.getSelectedItem();// TODO add your handling code here:
        // Update the project list based on the selected status
        System.out.println("Selected status: " + selectedStatus);
        
         if (selectedStatus.equals("Alla")) {
        hamtaAllaProjekt();
    } else if (selectedStatus.equals("Pågående")) {
        hamtaPagaendeProjekt();
        
        
    } else if (selectedStatus.equals("Avslutad")) {
        hamtaAvslutadeProjekt();
        
    } else if (selectedStatus.equals("Planerat")) {
        hamtaPlaneratProjekt();
    } else 
            hamtaAllaProjekt();

        
       
        
    }//GEN-LAST:event_btnVisastatusActionPerformed

    /**
     * 
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Projektstatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Projektstatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Projektstatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Projektstatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
           public void run() {
        
        //new Projektstatus().setVisible(true);
    }


});

}



            
        
               
           
                

           
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnVisastatus;
    private javax.swing.JComboBox<String> cbstatus;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> ltprojekt;
    // End of variables declaration//GEN-END:variables

}